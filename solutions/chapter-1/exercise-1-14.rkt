
#lang sicp

;------------------------------------------------------------------------------------------
;EXERCISE 1.14.
;---
;Draw the tree illustrating the process generated by the 'count-change' procedure (SEE
;BELOW *) in making change for 11 cents. What are the orders of growth of the space and
;number of steps used by this process as the amount to be changed increases?
;------------------------------------------------------------------------------------------

;(*) 'count-change' -> "procedure to compute the number of ways to change any given
;amount of money"
;---
;base cases: amount=0 => 1 way; amount<0 => 0 ways; denomination=0 => 0 ways
;---
;"the number of ways to change amount 'a' using 'n' kinds of coins equals:
;- the number of ways to change amount 'a' using all but the first kind of coin, plus
;- the number of ways to change amount (a-d) using all 'n' kinds of coins, where 'd' is
;the denomination of the first kind of coin"
;---

;'count-change' -> wrapper for 'cc' ('n-kinds' is assumed to be 5)
;---
(define (count-change amount) (cc amount 5))

;'cc' -> computes the number of distinct ways to change a given amount of money given
;'n-kinds' kinds of coins
(define (cc amount n-kinds)
  (cond ((= amount 0) 1)
        ((< amount 0) 0)
        ((= n-kinds 0) 0)
        (else
         (+ (cc amount (dec n-kinds))
            (cc (- amount
                   (first-denomination n-kinds))
                n-kinds)))))

;'first-denomination' -> returns the denomination of the first kind of coin (e.g., if
;'n-kinds' is 5, the 5th kind of coin - 50- is returned)
;---
(define (first-denomination n-kinds)
  (cond ((= n-kinds 1) 1)
        ((= n-kinds 2) 5)
        ((= n-kinds 3) 10)
        ((= n-kinds 4) 25)
        ((= n-kinds 5) 50)
        (else
         (error "'n-kinds' must be in [1,5] ->"
                n-kinds))))

;test 'count-change' for amount = 11 cents
;---
(count-change 11)

;space and time complexity
;---
;space -> the deepest the tree can get is 5 (number of kinds of coins) plus the amount of
;cents (in this case, 11), since the longest series of calls is made when we make change
;for a given amount of money using only 1 cent coins. hence, the space complexity for a
;given amount n is n+5 => O(n)
;---
;time -> O(n^5)
;refer to a solution adapted from Bill the Lizard's blog post (SÃ©bastien Gignoux)
;https://sicp-solutions.net/post/sicp-solution-exercise-1-14/

;draw the recursion tree originated by (count-change 11)
;after each procedure call (represented by a pair [amount, kind-of-coin]), its result is
;shown between parenthesis if the outcome of the call is captured by a base case
;---
;                               (11,5)
;                               /    \
;                           (11,4)  (-39,5)(0)
;                           /    \
;                       (11,3)  (-14,4)(0)
;                       /    \
;                   (11,2)  (1,3) ______
;                   /    \      \       \
;               (11,1)  (6,2)   (1,2)  (-9,3)(0)
;               /    \     \ \____ \_\____________
;              /      \     \     \         \     \
;        (11,0)(0)  (10,1)  (6,1) (1,2)    (1,1)  (-4,2)(0)
;               _____/     ___/_     \______   \_______________
;              /  /       /     \       \   \          \       \
;      (10,0)(0) (9,1) (6,0)(0) (5,1) (1,1) (-4,2)(0) (1,0)(0) (0,1)(1) <--- 1
;                /  \           /  \     \____________
;               /    \         /    \        \        \
;         (9,0)(0)  (8,1)  (5,0)(0) (4,1)   (1,0)(0)  (0,1)(1) <--- 2
;                   /   \           /   \
;            (8,0)(0)  (7,1)  (4,0)(0)  (3,1)
;                      /   \            /   \
;               (7,0)(0)  (6,1)   (3,0)(0)  (2,1)
;                         /   \             /   \
;                   (6,0)(0)  (5,1)  (2,0)(0)   (1,1)
;                             /   \             /   \
;                      (5,0)(0)   (4,1)  (1,0)(0)   (0,1)(1) <--- 3
;                                 /   \
;                          (4,0)(0)   (3,1)
;                                     /   \
;                              (2,0)(0)   (2,1)
;                                         /   \
;                                  (2,0)(0)   (1,1)
;                                             /   \
;                                      (1,0)(0)   (0,1)(1) <--- 4

