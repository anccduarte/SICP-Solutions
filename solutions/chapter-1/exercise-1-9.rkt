
#lang sicp

;------------------------------------------------------------------------------------------
;EXERCISE 1.9.
;---
;Each of the following two procedures defines a method for adding two positive integers
;in terms of the procedures 'inc', which increments its argument by 1, and 'dec', which
;decrements its argument by 1 (SEE BELOW *). Using the substitution model, illustrate the
;process generated by each procedure in evaluating (+ 4 5). Are these processes iterative
;or recursive?
;------------------------------------------------------------------------------------------

;(*) procedures
;---
;version 1 -> linearly iterative
(define (add-v1 a b)
  (if (= a 0) b (add-v1 (dec a) (inc b))))
;---
;version 2 -> linearly recursive
(define (add-v2 a b)
  (if (= a 0) b (inc (add-v2 (dec a) b))))

;test and illustrate the process generated by (add-v1 4 5)
;iterative procedure -> there is no chain of deferred operations in this case; moreover,
;a fixed set of state variables completely describes the state of the process at any
;point (e.g., (add-v1 4 5) yields the same result as (add-v1 3 6))
;time complexity: O(a); space complexity: O(1)
;---
(add-v1 4 5)
;0. (add-v1 4 5)
;1. (add-v1 3 6)
;3. (add-v1 2 7)
;4. (add-v1 1 8)
;5. (add-v1 0 9)
;6. 9

;test and illustrate the process generated by (add-v2 4 5)
;recursive procedure -> a chain of deferred increments is built, meaning that the state
;of the process can not be described by a fixed number of state variables (in this case
;the number of deferred operations is equal to the numeric argument that replaces the
;formal parameter 'a' in the body of the procedure)
;time complexity: O(a); space complexity: O(a)
;---
(add-v2 4 5)
;0. (add-v2 4 5)
;1. (inc (add-v1 3 5))
;2. (inc (inc (add-v1 2 5)))
;3. (inc (inc (inc (add-v1 1 5))))
;4. (inc (inc (inc (inc (add-v1 0 5)))))
;5. (inc (inc (inc (inc 5))))
;6. (inc (inc (inc 6)))
;7. (inc (inc 7))
;8. (inc 8)
;9. 9

