
#lang sicp

;------------------------------------------------------------------------------------------
;EXERCISE 3.10.
;---
;In the 'make-withdraw' procedure, the local variable 'balance' is created as a parameter
;of 'make-withdraw'. We could also create the local state variable explicitly, using
;'let', as follows:
;---
;(define (make-withdraw initial-amount)
;  (let ((balance initial-amount))
;    (lambda (amount)
;      (if (>= balance amount)
;          (begin (set! balance (- balance amount))
;                 balance)
;          "Insufficient funds"))))
;---
;Recall from Section 1.3.2 that 'let' is simply syntactic sugar for a procedure call:
;---
;(let ((<var> <exp>)) <body>)
;---
;is interpreted as an alternate syntax for
;---
;((lambda (<var>) <body>) <exp>)
;---
;Use the environment model to analyze this alternate version of 'make-withdraw', drawing
;figures like the ones above to illustrate the interactions
;---
;(define W1 (make-withdraw 100))
;(W1 50)
;(define W2 (make-withdraw 100))
;---
;Show that the two versions of 'make-withdraw' create objects with the same behavior. How
;do the environment structures differ for the two versions?
;------------------------------------------------------------------------------------------

;VERSION 1
;---
(define (make-withdraw-1 balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds!")))

;ENVIRONMENT STRUCTURE
;---
; global ---> +----------------------------------------+
; env         | make-withdraw --------------------+    | <----+
;             | W                                 |    |      |
;             +-|---------------------------------|----+      |
;               |             ↑                   |           |
;               |             |                   ↓           |
;               |      +--------------+       +---+---+       |
;               |      | balance: 100 |       | | | ----------+
;               |      +--------------+       +-|-+---+
;               |             ↑    ↑            |
;               ↓             |    |            ↓
;           +---+---+         |    E1       parameters: balance
;           | | | ------------+             body: (lambda (balance) (...))
;           +-|-+---+
;             |
;             ↓
;         parameters: amount
;         body: (lambda (amount) (...))

;VERSION 2
;---
(define (make-withdraw-2 init-amount)
  (let ((balance init-amount))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds!"))))

;VERSION 3 (analogous to version 2)
;---
(define (make-withdraw-3 init-amount)
  ((lambda (balance)
     (lambda (amount)
       (if (>= balance amount)
           (begin (set! balance (- balance amount))
                  balance)
           "Insufficient funds!")))
   init-amount))

;ENVIRONMENT STRUCTURE
;(not sure whether an extra environment E0 is created: TWO alternatives are then proposed
;for the environment structure generated by calling 'make-withdraw')
;---
; global ---> +----------------------------------------------+
; env         | make-withdraw -------------------------+     | <---+
;             | W                                      |     |     |
;             +-|--------------------------------------|-----+     |
;               |             ↑                        |           |
;               |             |                        ↓           |
;               |     +----------------------+     +---+---+       |
;               |     | init-amount: 100     |     | | | ----------+
;               |     | balance: init-amount |     +-|-+---+
;               |     +----------------------+       |
;               ↓             ↑        ↑             ↓
;           +---+---+         |        |          parameters: balance
;           | | | ------------+        E1         body: (lambda (balance) (...))
;           +-|-+---+
;             |
;             ↓
;         parameters: amount
;         body: (lambda (amount) (...))
;---
; global ---> +--------------------------------------------------+
; env         | make-withdraw -----------------------------+     | <---+
;             | W                                          |     |     |
;             +-|------------------------------------------|-----+     |
;               |             ↑                            |           |
;               |             |                            ↓           |
;               |     +------------------+             +---+---+       |
;               |     | init-amount: 100 | <---- E0    | | | ----------+
;               |     +------------------+             +-|-+---+
;               |             ↑                          |
;               |             |                          ↓
;               |     +----------------------+          parameters: balance
;               |     | balance: init-amount |          body: (lambda (balance) (...))
;               |     +----------------------+
;               |             ↑        ↑
;           +---+---+         |        |
;           | | | ------------+        E1
;           +-|-+---+
;             |
;             ↓
;           parameters: amount
;           body: (lambda (amount) (...))

;TEST
;---
(define (test versions)
  (if (null? versions)
      (display "")
      (begin (let* ((version (car versions))
                    (W (version 100)))
               (display (W 50)) (newline) ;50
               (display (W 60)) (newline) ;Insufficient funds!
               (display (W 20)) (newline) ;30
               (display "---") (newline))
             (test (cdr versions)))))
;---
(test (list make-withdraw-1
            make-withdraw-2
            make-withdraw-3))

